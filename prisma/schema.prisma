generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  restaurants Restaurant[]

  @@map("users")
}

model Restaurant {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  logo        String? // Base64 encoded logo
  address     String?
  phone       String?
  email       String?
  website     String?
  password    String  @default("123")
  isActive    Boolean @default(true) @map("is_active")

  // Appearance customization
  bannerColor String? @default("#ea580c") @map("banner_color")
  bannerImage String? @map("banner_image") // Base64 encoded banner image

  // About Us sections
  aboutStory   String? @map("about_story")
  aboutMission String? @map("about_mission")
  aboutVision  String? @map("about_vision")
  aboutChef    String? @map("about_chef")
  aboutHistory String? @map("about_history")

  // Business hours
  hoursMonday    String? @map("hours_monday")
  hoursTuesday   String? @map("hours_tuesday")
  hoursWednesday String? @map("hours_wednesday")
  hoursThursday  String? @map("hours_thursday")
  hoursFriday    String? @map("hours_friday")
  hoursSaturday  String? @map("hours_saturday")
  hoursSunday    String? @map("hours_sunday")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  adminId String @map("admin_id")
  admin   User   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  menuItems  MenuItem[]
  categories Category[]

  @@map("restaurants")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String? // Base64 encoded image
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  restaurantId String     @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  image       String? // Base64 encoded image
  imageAlt    String? @map("image_alt")
  isAvailable Boolean @default(true) @map("is_available")
  isActive    Boolean @default(true) @map("is_active")
  sortOrder   Int     @default(0) @map("sort_order")

  // Additional fields for better menu control
  ingredients  String?
  allergens    String?
  isVegetarian Boolean @default(false) @map("is_vegetarian")
  isVegan      Boolean @default(false) @map("is_vegan")
  isGlutenFree Boolean @default(false) @map("is_gluten_free")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  restaurantId String     @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

enum UserRole {
  ADMIN
  RESTAURANT
}
